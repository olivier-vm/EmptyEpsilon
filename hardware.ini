[hardware]
device = DMX512SerialDevice     # Our devices dmx driver. 
port = COM3						# Our usb2dmx device                      

##
## Channels
##

[channels]   

# PAR64 spot: red, green, blue, white, blinking, program, speed
#mainLights = 13, 14, 15, 16, 17, 18, 19  

# PAR36 spot: intensity, red, blue, green, blinking, color fader, color changer & sound activation  
#warningLight = 1, 2, 3, 4, 5, 6, 7

# Magic Ball: Strobe, Blue White, Red Yellow, Green Purple, Motor, Programs 
magicBall = 1, 2, 3, 4, 5, 6

# PAR 1 RGB 5 channels: Red, Green, Blue, White, Strobe
parRGB-front = 8, 9, 10, 11, 12

# PAR 2 RGB 5 channels: Red, Green, Blue, White, Strobe
parRGB-rear = 13, 14, 15, 16, 17

# Ribbon RGB: Red, Green, Blue
ribbonRGB = 18, 19, 20

# Ribbon UV: Intensity
ribbonUV = 21

# LED BAR-6 QCL RGBW 6 channels: Red, Green, Blue, White, Dimmer, Strobe
barRGB = 22, 23, 24, 25, 26, 27

# Smooth Scan Blue DMX Laser 17 channels: Mode, Group, Pattern, Strobe, Clipping, Zooming, Zoom speed, x-axis, rolling, roll speed, y-axis rolling, roll speed, z-axis rolling, roll, speed, x-axis move, moving speed, y-axis move, moving speed

laser = 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44

##
## States
##

# Eclairage en standby au début du jeu dans les menus
# Faible éclairage général sur tous les par/bar (10-20%) et rubban

[state]
condition = HasShip == 0
target = parRGB-front
value = 0, 0, 0, 0.2, 0

[state]
condition = HasShip == 0
target = parRGB-rear
value = 0, 0, 0, 0.2, 0

[state]
condition = HasShip == 0
target = ribbonRGB
value = 0.1, 0.1, 0.1

[state]
condition = HasShip == 0
target = barRGB
value = 0, 0, 0, 0.1, 1, 0

# Dans une nébuleuse
# Couleurs variables entre rose et mauve + magic ball + UV

[state]
condition = InNebula
target = parRGB-front
effect = Glow
min_value = 0.5, 0, 1, 0, 0
max_value = 1, 0, 1, 0, 0
time = 1

[state]
condition = InNebula
target = parRGB-rear
effect = Glow
min_value = 1, 0, 1, 0, 0
max_value = 0.5, 0, 1, 0, 0
time = 1

[state]
condition = InNebula
target = barRGB
effect = Glow
min_value = 0.5, 0, 1, 0, 1, 0
max_value = 1, 0, 1, 0, 1, 0
time = 1

[state]
condition = InNebula
target = ribbonUV
effect = Glow
min_value = 1
max_value = 0.1
time = 1

[state]
condition = InNebula
target = magicBall
value = 1, 1, 0, 0, 0.5, 0

# Docking - Arrimage
# Rubban + bar vert foncé clignotant

[state]
condition = Docking
target = ribbonRGB
effect = Glow
min_value = 0, 0, 0
max_value = 0, 0.78, 0
time = 0.5

[state]
condition = Docking
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 0, 0.78, 0, 0, 0
time = 0.5

[state]
condition = Docking
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 0, 0.78, 0, 0, 1, 0
time = 0.5

[state]
condition = Docking
target = laser
# value = 203, 0, 228, 0, 0, 134, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
value = 0.796, 0, 0.894, 0, 0, 0.525, 0.044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

# Docked - Arrimé
# Rubban + bar vert permanent

[state]
condition = Docked
target = ribbonRGB
value = 0, 0.78, 0

[state]
condition = Docked
target = parRGB-rear
value = 0, 0.78, 0, 0, 0

[state]
condition = Docked
target = barRGB
value = 0, 0.78, 0, 0, 1, 0

# Shields up - Boucliers activés
# PAR led Bleu

[state]
condition = ShieldsUp
target = parRGB-front
value = 0, 0, 0.78, 0, 0

[state]
condition = ShieldsUp
target = parRGB-rear
value = 0, 0, 0.78, 0, 0

[state]
condition = ShieldsUp
target = barRGB
value = 0, 0, 0.78, 0, 1, 0

# Bouclier avant
# Hit - Touché par un tir - Bouclier diminue
# White/Blue strobe on front

[event]
trigger = <FrontShield
target = parRGB-front
runtime = 0.5
value = 0, 0, 1, 1, 1

[event]
trigger = <FrontShield
target = barRGB
runtime = 0.5
value = 0, 0, 1, 1, 1, 0.8

# Bouclier arrière
# Hit - Touché par un tir - Bouclier diminue
# White/Blue strobe on rear

[event]
trigger = <RearShield
target = parRGB-rear
runtime = 0.5
value = 0, 0, 1, 1, 1

[event]
trigger = <RearShield
target = barRGB
runtime = 0.5
value = 0, 0, 1, 1, 1, 0.8

# Boucliers avant en voie de destruction
# Glowing blue

[state]
condition = FrontShield < 50
target = parRGB-front
effect = Glow
min_value = 0, 0, 0.1, 0, 0
max_value = 0, 0, 0.3, 0, 0
time = 2

[state]
condition = FrontShield < 50
target = barRGB
effect = Glow
min_value = 0, 0, 0.1, 0, 1, 0
max_value = 0, 0, 0.3, 0, 1, 0
time = 2

[state]
condition = FrontShield < 10
target = parRGB-front
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 0, 0, 0.1, 0, 0
time = 0.2

[state]
condition = FrontShield < 10
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 0, 0, 0.1, 0, 1, 0
time = 0.2

# Boucliers arrière en voie de destruction
# Glowing blue

[state]
condition = RearShield < 50
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0.1, 0, 0
max_value = 0, 0, 0.3, 0, 0
time = 2

[state]
condition = RearShield < 50
target = barRGB
effect = Glow
min_value = 0, 0, 0.1, 0, 1, 0
max_value = 0, 0, 0.3, 0, 1, 0
time = 2

[state]
condition = RearShield < 10
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 0, 0, 0.1, 0, 0
time = 0.2

[state]
condition = RearShield < 10
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 0, 0, 0.1, 0, 1, 0
time = 0.2

# Coque / Carlingue
# Hit - Touché par un tir - Coque diminue
# White/Red strobe (un peu plus lent) on both par led

[event]
trigger = <Hull
target = parRGB-front 
runtime = 0.6
value = 1, 0, 0, 1, 0.9

[event]
trigger = <Hull
target = parRGB-rear 
runtime = 0.6
value = 1, 0, 0, 1, 0.9

[event]
trigger = <Hull
target = barRGB 
runtime = 0.6
value = 1, 0, 0, 1, 1, 0.6

# Coque en voie de destruction
# Glowing red

[state]
condition = Hull < 10
target = parRGB-front
effect = Glow
min_value = 0, 0, 0, 0, 1
max_value = 0.1, 0, 0, 0, 1
time = 0.1

[state]
condition = Hull < 10
target = parRGB-rear
effect = Glow
min_value = 0.1, 0, 0, 0, 0
max_value = 0, 0, 0, 0, 0
time = 0.1

[state]
condition = Hull < 10
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 0.1, 0, 0, 0, 1, 0
time = 0.1

[state]
condition = Hull < 10
target = ribbonRGB
effect = Glow
min_value = 0, 0, 0
max_value = 0.1, 0, 0
time = 0.1

# Perte d'énergie
# En dessous de 10% on fait un glow léger

[state]
condition = Energy < 10
target = parRGB-front
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 0, 0, 0, 0.1, 0
time = 5

[state]
condition = Energy < 10
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0, 0.1, 0
max_value = 0, 0, 0, 0, 0
time = 5

[state]
condition = Energy < 10
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 0, 0, 0, 0.5, 1, 0
time = 5

[state]
condition = Energy < 10
target = ribbonRGB
effect = Glow
min_value = 0, 0, 0
max_value = 0.1, 0.1, 0.1
time = 5

# Saut effectué, tous les rubbans full et flash strobo 1 seconde

[state]
condition = Jumped
target = parRGB-front 
value = 1, 1, 1, 1, 1

[state]
condition = Jumped
target = parRGB-rear 
value = 1, 1, 1, 1, 1

[state]
condition = Jumped
target = ribbonRGB 
value = 1, 1, 1

[state]
condition = Jumped
target = barRGB
value = 1, 1, 1, 1, 1, 1

[state]
condition = Jumped
target = ribbonUV
value = 1

# Yellow Alert (relay)
# 2 par led fast glowing yellow + rubban jaune

[state]
condition = YellowAlert
target = parRGB-front
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 1, 0.66, 0, 0, 0
time = 0.5

[state]
condition = YellowAlert
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 1, 0.66, 0, 0, 0
time = 0.5

[state]
condition = YellowAlert
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 1, 0.66, 0, 0, 1, 0
time = 0.5

[state]
condition = YellowAlert
target = ribbonRGB
effect = Glow
min_value = 0, 0, 0
max_value = 1, 0.66, 0
time = 0.5

# Red Alert (relay)
# Les 2 par led + rubban glow en rouge simultanément + magic ball

[state]
condition = RedAlert
target = parRGB-front
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 1, 0, 0, 0, 0
time = 0.250

[state]
condition = RedAlert
target = parRGB-rear
effect = Glow
min_value = 0, 0, 0, 0, 0
max_value = 1, 0, 0, 0, 0
time = 0.250

[state]
condition = RedAlert
target = barRGB
effect = Glow
min_value = 0, 0, 0, 0, 1, 0
max_value = 1, 0, 0, 0, 1, 0
time = 0.250

[state]
condition = RedAlert
target = ribbonRGB
effect = Glow
min_value = 0, 0, 0
max_value = 1, 0, 0
time = 0.250

[state]
condition = RedAlert
target = magicBall
value = 0.55, 0, 1, 0, 1, 0				# Red-Yellow turning and blinking fast

# # Jumping pour les sauts warp (expérimentaux si ca arrive)
# # Jaune glowing - quasi idem alerte jaune

# [state]
# condition = Jumping
# target = parRGB-front
# effect = Glow
# min_value = 0, 0, 0, 0, 0
# max_value = 1, 0.66, 0, 0, 0
# time = 0.6

# [state]
# condition = Jumping
# target = parRGB-rear
# effect = Glow
# min_value = 0, 0, 0, 0, 0
# max_value = 1, 0.66, 0, 0, 0
# time = 0.6

# [state]
# condition = Jumping
# target = barRGB
# effect = Glow
# min_value = 0, 0, 0, 0, 1, 0
# max_value = 1, 0.66, 0, 0, 1, 0
# time = 0.6

# [state]
# condition = Jumping
# target = ribbonRGB
# effect = Glow
# min_value = 0, 0, 0
# max_value = 1, 0.66, 0
# time = 0.6

# # Warping (RLS)

# [state]
# condition = HasShip
# target = laser
# effect = variable
# input = Warp
# min_input = 0 
# max_input = 4
# min_output = [203], 0, [62], 0, 0, [205], [32], 0, 0, 0, 0, [162], [152], 0, 0, 0, 0
# max_output = [203], 0, [62], 0, 0, [205], [0], 0, 0, 0, 0, [162], [5], 0, 0, 0, 0

# # If we are being jammed

# #[state]
# condition = IsJammed
# target = laser
# value = [212], 0, [200], [255], 0, [255], 0, 0, 0, 0, 0, [255], 0, 0, 0, 0, 0

# #[state]
# #condition = IsJammed
# #target = laser
# #value = [203], [66], [94], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, [143], [28]